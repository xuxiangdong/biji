<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="2acqfi2mtp5ott1c1o5bc11oqe" modified-by="xxd" theme="6knnc95go7j4ab6mo55aqsduqu" timestamp="1587735142998" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="0df2d543cko134cm5qk3m4j42f" modified-by="xxd" structure-class="org.xmind.ui.map.unbalanced" style-id="63k3nn0foe69lnftcu834183ce" timestamp="1587735025490"><title>Redis思维导图</title><children><topics type="attached"><topic id="5afjoh8app0u8t8p4naek9ilje" modified-by="xxd" style-id="6bj9t9j4ognaotc38h59majlva" timestamp="1587559320659"><title>1.特性及应用场景</title><children><topics type="attached"><topic id="5gjoojagq3177mid6mi64al095" modified-by="xxd" style-id="6bj9t9j4ognaotc38h59majlva" timestamp="1587559320642"><title>特性</title><children><topics type="attached"><topic id="1e3mhma5qreb7ajatht7q53q1r" modified-by="xxd" style-id="6bj9t9j4ognaotc38h59majlva" timestamp="1587559320637"><title>单线程</title></topic><topic id="6jamm7l5ll7e06na67bmvapuj7" modified-by="xxd" style-id="6bj9t9j4ognaotc38h59majlva" timestamp="1587559320638"><title>纯内存访问</title></topic><topic id="3inbu487mf1ep5qvk15di010ac" modified-by="xxd" style-id="6bj9t9j4ognaotc38h59majlva" timestamp="1587559320640"><title>支持数据持久化</title></topic><topic id="6utakm8ocdpmk6n2slrlito9qq" modified-by="xxd" style-id="6bj9t9j4ognaotc38h59majlva" timestamp="1587559320641"><title>非阻塞IO（epoll）</title></topic></topics></children></topic><topic id="7k50gsq3ptdak69t8n58aj2cji" modified-by="xxd" structure-class="org.xmind.ui.logic.right" style-id="6uh3mutl1m751tq797nionuda3" timestamp="1587559320649"><title>应用场景</title><children><topics type="attached"><topic id="4mc5tf31avi3a5bs4gfqp7fo6m" modified-by="xxd" structure-class="org.xmind.ui.logic.right" style-id="6uh3mutl1m751tq797nionuda3" timestamp="1587559320645"><title>缓存</title></topic><topic id="59o5mm75fnrts9irns29ipbve6" modified-by="xxd" style-id="6uh3mutl1m751tq797nionuda3" timestamp="1587559320646"><title>队列</title></topic><topic id="1ttinavjbdetmmk7vloetpbq68" modified-by="xxd" style-id="6uh3mutl1m751tq797nionuda3" timestamp="1587559320647"><title>网站访问统计</title></topic><topic id="2l4bkq6f19n1clogvc2let7hnq" modified-by="xxd" style-id="6uh3mutl1m751tq797nionuda3" timestamp="1587559320648"><title>分布式session</title></topic><topic id="2i7idhmqruaoj01t0tto1u2fpq" modified-by="xxd" style-id="6uh3mutl1m751tq797nionuda3" timestamp="1587559320649"><title>应用排行榜</title></topic><topic id="5sqv4e9la3j2q4b4c68g3fat7q" modified-by="xxd" style-id="6uh3mutl1m751tq797nionuda3" timestamp="1587559320649"><title>社交关系图</title></topic></topics></children></topic><topic id="223llaj5dpgep1k8fna4pvlikj" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320659"><title>版本新特性</title><children><topics type="attached"><topic id="7u5qf19dirb5odvapvet2t6p5f" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320651"><title>2.8</title><children><topics type="attached"><topic id="00brok4l4roqcvs75nnc2f8qh8" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320651"><title>主从断线重连后采取部分复制（Psync）</title></topic><topic id="3se8f8nrc7p24hh31cto4gck70" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320651"><title>Redis Sentinel  Stable</title></topic></topics></children></topic><topic id="769t38468vs4go6jj91mc8ce4e" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320652"><title>3.0</title><children><topics type="attached"><topic id="1ksqbt737agd2b7n4ehmhnk33f" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320652"><title>Redis Cluster</title></topic></topics></children></topic><topic id="4ti6fln2eujc39fgf2bpe3946b" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320653"><title>3.2</title><children><topics type="attached"><topic id="536b3ft69btj74572vm05ltiui" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320653"><title>GEO</title></topic></topics></children></topic><topic id="2j89dgsu7n7s8cs5p25sg5sle0" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320655"><title>4.0</title><children><topics type="attached"><topic id="6bcpqt6k1h5297rvei8e66hupv" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320654"><title>提供模块系统方便第三方拓展</title></topic><topic id="7t9ekg2afl8le21hctbl5t39di" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320654"><title>非阻塞del和flushall/flushdb功能</title></topic><topic id="5hoh78r7hi2fqrohqln52n99uo" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320655"><title>RDB和AOF混合持久化模式</title></topic><topic id="6ges41dl4a09b6iu2u55b4duvs" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320655"><title>Redis Cluster兼容NAT和Docker</title></topic></topics></children></topic><topic id="6ujn1bda4pta37qhoj7alm78f8" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320659"><title>5.0</title><children><topics type="attached"><topic id="68iagko9ou820uk4ue2h7iv3gm" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320656"><title>新数据类型Stream(借鉴了Kafka的设计,消息可持久化)</title></topic><topic id="6v7ugtsglmsmtu8jngpc2lhcos" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320656"><title>新Redis模块API:Timers and Cluster API</title></topic><topic id="14k8pbpgh1htsscd9t79btdkqu" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320657"><title> RDB现在存储LFU和LRU信息</title></topic><topic id="65u0qakua0470jdhgbebnjekch" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320657"><title>集群管理器从Ruby(redis-trib.rb)改成C重写</title></topic><topic id="774tu4vehvatc8ck31bcicoccm" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320657"><title>新sorted set命令:ZPOPMIN/MAX和阻塞变量</title></topic><topic id="56vfn4o2lbh1o5qj1omnbob17a" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320658"><title>主动碎片整理</title></topic><topic id="2peth9a5ikucl9ckqd7i0acg2n" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320658"><title>增强HyperLogLog实现</title></topic><topic id="0qpnsrtq25ksc6epo6de1oc334" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320659"><title>内存统计报告更直观</title></topic><topic id="4534qvul9nc90sbot6l340se1l" modified-by="xxd" style-id="7vc81suodot2c5h18trfgli17t" timestamp="1587559320659"><title>Jemalloc升级到5.1版</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="1ck78rupashb1h5qpbjp50pd8j" modified-by="xxd" style-id="6kt66090agskkdaoc0p5r1qabp" timestamp="1587559371725"><title>2.数据结构及内部编码</title><children><topics type="attached"><topic id="7dmn9g3ggt2l6e4hjoqa5un9uk" modified-by="xxd" style-id="6kt66090agskkdaoc0p5r1qabp" timestamp="1587559567314"><title>基本数据类型</title><children><topics type="attached"><topic id="2se7phgsbpcrjnuhbl3nv2la2l" modified-by="xxd" style-id="6kt66090agskkdaoc0p5r1qabp" timestamp="1587644619931"><title>字符串（String）</title><children><topics type="attached"><topic id="27s4g1hrlp0ka61b4s6h4ecd33" modified-by="xxd" style-id="5imf3akacn2a3n7o610r9f0j2j" timestamp="1587644649878"><title>整型（int）</title></topic><topic id="44ssmnk63ojrm48bbohp1rbhgd" modified-by="xxd" style-id="4qff5qobcfhkm6gatqc6oeofkc" timestamp="1587644675218"><title>embstr编码的简单动态字符串</title></topic><topic id="5ud91m3a1d3bl84atn3o8e443h" modified-by="xxd" style-id="3gibglm20taeqa117dkj3qk9vm" timestamp="1587644687006"><title>简单动态字符串</title></topic></topics></children></topic><topic id="45lfoorsrf5nfh16uqnbnlkgk5" modified-by="xxd" style-id="6kt66090agskkdaoc0p5r1qabp" timestamp="1587644692563"><title>列表（List）</title><children><topics type="attached"><topic id="79o7pitfkrk5mu9p1gj20d8kfi" modified-by="xxd" style-id="2s6k3sa97hcnvmd21iggvppgdd" timestamp="1587644715359"><title>链表（Linkedlist）</title></topic><topic id="3u05m2nb6c6gu5iugr62qg4sam" modified-by="xxd" style-id="286e2q0n745oqmmh17b3b53gj8" timestamp="1587644741567"><title>快速列表（Quicklist）</title></topic></topics></children></topic><topic id="0hss2o0enjvjv79tl0pj0rk2g9" modified-by="xxd" style-id="6kt66090agskkdaoc0p5r1qabp" timestamp="1587644750641"><title>哈希（Hash）</title><children><topics type="attached"><topic id="7rkuad8uc6hu875c1f16keeanl" modified-by="xxd" style-id="34s4etj0gi4rk490002pf5kfoa" timestamp="1587644772949"><title>哈希表（Hashtable）</title></topic><topic id="31bblsko4d75cuafqkhaikile0" modified-by="xxd" style-id="533trfjmm4igluf5e9v4u72o0i" timestamp="1587644792668"><title>压缩表（Ziplist）</title></topic></topics></children></topic><topic id="7h45t6uvqs4i8asq9u0rm8873n" modified-by="xxd" style-id="6kt66090agskkdaoc0p5r1qabp" timestamp="1587644804143"><title>集合（Set）</title><children><topics type="attached"><topic id="5lm0jl8jlmdhn0tdhi2j5d1tab" modified-by="xxd" style-id="1sdnlad79cn8r35mkmtblvpe77" timestamp="1587644824669"><title>整形集合（intset）</title></topic><topic id="2dke5t709kjli1jpm1noogvtpa" modified-by="xxd" style-id="5b7bp1k2jo2fkq52us741omd6m" timestamp="1587644840491"><title>哈希表（Hashtable）</title></topic></topics></children></topic><topic id="6bdvjv922mjs8p2lmre3uksml3" modified-by="xxd" style-id="5fc6uf6t6torc7j4u1uea23qad" timestamp="1587644850243"><title>有序集合（ZSet）</title><children><topics type="attached"><topic id="1h7t9119sdb19699nt5hb2lpnp" modified-by="xxd" style-id="64dnht2q9kpk5n85cskl1o9b48" timestamp="1587644872137"><title>压缩表（Ziplist）</title></topic><topic id="0hvpfn8hfaid4pj86m6cp122h1" modified-by="xxd" style-id="4svtk5s937a6oedbhh2ef3omu0" timestamp="1587644888608"><title>跳跃表（Skiplist）</title></topic></topics></children></topic></topics></children></topic><topic id="51b6ur0bel2rhcgkf9048o679u" modified-by="xxd" structure-class="org.xmind.ui.logic.right" style-id="5hhthke86r5cnv6m27il74vnh0" timestamp="1587559592614"><title>其它数据类型</title><children><topics type="attached"><topic id="402a1pa3ikcshv7tg7fn9tdb1a" modified-by="xxd" structure-class="org.xmind.ui.logic.right" style-id="5hhthke86r5cnv6m27il74vnh0" timestamp="1587559606438"><title>Bitmap</title></topic><topic id="2a1qbjohf4t99bi4vskiqv3cu4" modified-by="xxd" style-id="5hhthke86r5cnv6m27il74vnh0" timestamp="1587559632407"><title>Hyperloglog</title></topic><topic id="35l85uj5jsj6sl3c1iss12871v" modified-by="xxd" style-id="5hhthke86r5cnv6m27il74vnh0" timestamp="1587559608724"><title>GEO</title></topic></topics></children></topic></topics></children></topic><topic id="7m0hpeb9i22r6gfp3akq5lhj4j" modified-by="xxd" timestamp="1587644996553"><title>3.持久化</title><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions><children><topics type="attached"><topic id="5cp1u3etkcsbi8u7dcrsbfst5g" modified-by="xxd" style-id="6kt66090agskkdaoc0p5r1qabp" timestamp="1587644995077"><title>RDB</title><children><topics type="attached"><topic id="3vj3qq0njrone7jg4qqu3m268c" modified-by="xxd" style-id="0j2ah469u4eqig8j23iupcljrv" timestamp="1587645012703"><title>内存快照</title></topic><topic id="6steptkrjnvbcrk7plk385pvqj" modified-by="xxd" style-id="0j2ah469u4eqig8j23iupcljrv" timestamp="1587645048102"><title svg:width="500">恢复速度快，持久化性能高，但是存在数据丢失风险</title></topic></topics></children></topic><topic id="1u90i91vcq9gqfhgctuhsqq2il" modified-by="xxd" style-id="1ujqafbkmu7kbldkk8ips98orb" timestamp="1587645002103"><title>AOF</title><children><topics type="attached"><topic id="6kjt303rgbgprasckq8cjj3o0q" modified-by="xxd" style-id="70262687cmjh9djqmtua0n9o1o" timestamp="1587645065488"><title>日子文件追加记录</title></topic><topic id="0b40087rst9jul5vdm7oaso3ad" modified-by="xxd" style-id="70262687cmjh9djqmtua0n9o1o" timestamp="1587645096807"><title>实时持久化，数据安全性更高，持久化效率低</title></topic></topics></children></topic></topics></children></topic><topic id="4u6k0nnvjlb6j997htn7mvolfb" modified-by="xxd" timestamp="1587645492498"><title>6.分布式</title><children><topics type="attached"><topic id="5pifc8914ho834uji4f2v8dhih" modified-by="xxd" style-id="41rht0f1fjdkilm63n252gev7p" timestamp="1587645589476"><title>方案</title><children><topics type="attached"><topic id="5llq2adt5p3tj6c520ah944t5o" modified-by="xxd" style-id="348j71kvvtp2lkdmghojguqi8g" timestamp="1587645526229"><title>集群</title><children><topics type="attached"><topic id="28i029nkp6j75q90m7fogucals" modified-by="xxd" style-id="0jhp6de95d6rh7ph9qpa4ad8e6" timestamp="1587645537779"><title>Redis Cluster</title></topic></topics></children></topic><topic id="31vdbo632111noltdbsiv191kb" modified-by="xxd" style-id="7okn8t8upnaeaj1gls8esec929" timestamp="1587645562004"><title>中间件分片</title><children><topics type="attached"><topic id="2hr94ijqpfs639pcpq402tcbhq" modified-by="xxd" style-id="2nmqe25m39jn72lheiuhjj85vh" timestamp="1587645573537"><title>TwemProxy</title></topic><topic id="3dcgidgrrtll1gdgjpieirbrmn" modified-by="xxd" style-id="5mgairv1bbi32hai7beefo4g0r" timestamp="1587645584980"><title>CodisProxy</title></topic></topics></children></topic><topic id="4f7823niho19lhb5arguhuih70" modified-by="xxd" style-id="30piq9mfk8a7jg50km83v3u7g8" timestamp="1587645604613"><title>客户端分片</title><children><topics type="attached"><topic id="6sf142jkqegptgv6eui9j936km" modified-by="xxd" style-id="4ojhlhm2b77bt1frfrfi3r6bqh" timestamp="1587645611310"><title>业务程序</title></topic></topics></children></topic></topics></children></topic><topic id="6scddgq986sgrt1a9hrr4ihfts" modified-by="xxd" style-id="0ri5ap92voj4085i6vhqs79548" timestamp="1587645623253"><title>原理</title><children><topics type="attached"><topic id="6d29et0qvokm4snsgdutbnuhod" modified-by="xxd" style-id="0f0c96smflgotd46unah8p6r9r" timestamp="1587645652740"><title>客户端分片</title><children><topics type="attached"><topic id="42tqe82c7cr4tpmdk77jaieuh0" modified-by="xxd" style-id="6fj7a8pr4kg25m4v17ren5pm0g" timestamp="1587645659796"><title>一致性哈希算法</title></topic></topics></children></topic><topic id="2g0l0qlbd255ncrcvc7vu35vjs" modified-by="xxd" style-id="57rtrlqc3sr3jrgncbrq0o4tr5" timestamp="1587645672952"><title>Codis</title><children><topics type="attached"><topic id="6ljg21c2m9nk9052hvoaukdjj1" modified-by="xxd" style-id="1fcsoeb479j5aa1fn559h6ki8a" timestamp="1587645702085"><title>虚拟槽分区（1024个槽）</title></topic><topic id="5luukujajl9eo9j4spiaa341o5" modified-by="xxd" style-id="025gujdobtp1na4od2fcs3ifaj" timestamp="1587645735296"><title>集群内部数据节点独立运作，无需相互通信</title></topic></topics></children></topic><topic id="2irik14jrc06lpd0rb9du6eqjv" modified-by="xxd" style-id="7uvckae3ib9b54r73qpgb26m1k" timestamp="1587645751488"><title>Redis Cluster</title><children><topics type="attached"><topic id="1g0h1dj34m3ue2vl5ivir4038n" modified-by="xxd" style-id="75rqkbt1nt9081jbu58f5b4hgg" timestamp="1587645774889"><title>Gossip协议——集群内部节点相互通信</title></topic><topic id="4ju6vmi8f7uv47liied2brhg0b" modified-by="xxd" style-id="7qg2gtkm96vsotmq15qk0k1d96" timestamp="1587645794172"><title>Raft算法——集群内选主</title></topic><topic id="7hjknc8j54bdhp2iprq4to4dg5" modified-by="xxd" style-id="36d9pbnqaq5ab66ac6g6fdunfq" timestamp="1587645822118"><title>虚拟槽分区（16384个槽）</title></topic></topics></children></topic></topics></children></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions></topic><topic id="2k3p519up9be2fr2lrkpc8r362" modified-by="xxd" timestamp="1587729379924"><title>7.阻塞</title><children><topics type="attached"><topic id="3216ss756saq33v3g2b6fdjo8n" modified-by="xxd" style-id="66q23297sgfif24p7kagblrd99" timestamp="1587729426328"><title>持久化阻塞</title><children><topics type="attached"><topic id="0856c5p4v7ia3pdmu510e93qe8" modified-by="xxd" style-id="6ko5g6f3ssg888km9ohhud75e3" timestamp="1587729424729"><title>fork子进程</title><children><topics type="attached"><topic id="0rj0orsljroblgnfst9gk1bqgc" modified-by="xxd" style-id="1n663ehe0o0op7i32tn498ic9h" timestamp="1587729435598"><title svg:width="500">RDB持久化</title></topic><topic id="5qmooh647qcvp44hbuhst0kqn3" modified-by="xxd" style-id="6nvntl7rg6qbqf2ri3a9rc5s7c" timestamp="1587729443525"><title svg:width="500">AOF文件重写</title></topic></topics></children></topic></topics></children></topic><topic id="3fh5dfsdh2igvlqa7jl623loph" modified-by="xxd" style-id="07b5j4q7rc34qmmn8auk384j79" timestamp="1587729527245"><title>命令阻塞</title><children><topics type="attached"><topic id="4a41h11cusd5069075kvv87bev" modified-by="xxd" style-id="3cfbjuj2asqsjpttfmjqo21874" timestamp="1587729505081"><title>keys*</title></topic><topic id="50fk9aklogr65oqd1bas7f1538" modified-by="xxd" style-id="3cfbjuj2asqsjpttfmjqo21874" timestamp="1587729517849"><title>smembers</title></topic><topic id="746j8tcv08jg0huh4nk239mc81" modified-by="xxd" style-id="6u8o0cfufiirodn2fkubco14f1" timestamp="1587729535948"><title>lrange</title></topic><topic id="3pdvkn13pei8iacof2b893difq" modified-by="xxd" style-id="05p392doftc7mbdgultdkv78r2" timestamp="1587729539004"><title>hgetall</title></topic></topics></children></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions></topic><topic id="5o1jns2g5qrnr59un5k2empm2q" modified-by="xxd" timestamp="1587645479723"><title>5.高可用</title><children><topics type="attached"><topic id="0359coo1q6ff37m2id583sm7v8" modified-by="xxd" style-id="271esr5mui39be5jqp0cicv12d" timestamp="1587645479717"><title>Redis Sentinel</title></topic><topic id="3r4k1ib06b2u7g8qij5ul741dc" modified-by="xxd" style-id="43isli7kpljrhbrp4oadbj9tk0" timestamp="1587645479719"><title>Redis Cluster（集群自带高可用）</title></topic><topic id="5hei5e7ug405jnjs1ckd4te7rh" modified-by="xxd" style-id="4fmfdg3neqsofoqu42nq646adu" timestamp="1587645479722"><title>Keepalived</title></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions></topic><topic id="16mrvrpual127vnv1jf3uc1h4a" modified-by="xxd" timestamp="1587729358042"><title>4.复制</title><children><topics type="attached"><topic id="35gdo32rf597i6kof1u13js0gq" modified-by="xxd" style-id="7iabqloovl3900bc1uj781j0d0" timestamp="1587729358020"><title>原理</title><children><topics type="attached"><topic id="5kiprtfmbav2hvgdm6jlbbdni9" modified-by="xxd" style-id="09jq1eaeudr0a0dbnkp214v33k" timestamp="1587729358016"><title>同步RDB文件</title></topic><topic id="6pttra9p4ocvpc1s2tfk1vln4b" modified-by="xxd" style-id="09jq1eaeudr0a0dbnkp214v33k" timestamp="1587729358019"><title svg:width="500">复制缓冲区</title></topic></topics></children></topic><topic id="78m78cvpdl8h8f79om5vt02cbn" modified-by="xxd" style-id="3am6eci1gnvrqm35kammckm3m9" timestamp="1587729358027"><title>类型</title><children><topics type="attached"><topic id="6ss3edq2e5akor8v0u3g39liu3" modified-by="xxd" style-id="0hbtb36deqopbavi3n5a2e0rj3" timestamp="1587729358024"><title>部分复制（Psync，2.8版本之后）</title></topic><topic id="4abd8c24hic0tad0pjaja03f9j" modified-by="xxd" style-id="0hbtb36deqopbavi3n5a2e0rj3" timestamp="1587729358026"><title>全量复制（Sync）</title></topic></topics></children></topic><topic id="0bdhmc4s6h6enj0d3pdrcq2uu0" modified-by="xxd" style-id="3a4sr1tbia0o91l9rdmtteritq" timestamp="1587729358040"><title>拓扑</title><children><topics type="attached"><topic id="59368tse52r5m9tkqksf5np3rr" modified-by="xxd" style-id="27ck4gikbnkc0d8jjhuhnr6dlm" timestamp="1587729358036"><title>星型</title><children><topics type="attached"><topic id="6iklubu4jl6ogme0l380rk6qnr" modified-by="xxd" style-id="60svat9cafcesoo6lep47bbtvt" timestamp="1587729358033"><title>主-从（单节点）</title></topic><topic id="3vp7o941miqlp30npenochp0rg" modified-by="xxd" style-id="6b35ii6itveo970r6ar0d5fvhl" timestamp="1587729358035"><title>主-从（多节点）</title></topic></topics></children></topic><topic id="1ugsule8sdcfbksvjtagao824k" modified-by="xxd" style-id="27ck4gikbnkc0d8jjhuhnr6dlm" timestamp="1587729358040"><title>树型</title><children><topics type="attached"><topic id="1d6moqtn9p366a1go56sqokngj" modified-by="xxd" style-id="5h94gtnue2fvvkmr7gs3ntrbup" timestamp="1587729358039"><title>主-从（主）-从</title></topic></topics></children></topic></topics></children></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions></topic><topic id="7luac3l9f2iqpf7epbe7cv2qt0" modified-by="xxd" timestamp="1587729576637"><title>8.内存</title><children><topics type="attached"><topic id="6bh52qmu3e5je5bj177kbkfumb" modified-by="xxd" style-id="2deui5espct43co6c2bqfm4v7t" timestamp="1587730102068"><title>内存消耗</title><children><topics type="attached"><topic id="170q0b57juh5b84u45uk8ja75m" modified-by="xxd" style-id="598t3e1muiqhhu9aj32fhid6hm" timestamp="1587729700686"><title>对象内存</title><children><topics type="attached"><topic id="6tq0hkqqosa39dpdgf9q31fg1v" modified-by="xxd" style-id="6smhi5pdn1rut4bmibd33alogs" timestamp="1587729694921"><title svg:width="500">存储着所有数据</title></topic></topics></children></topic><topic id="5tn2ssuftik9tsrfkhdt6c9vr5" modified-by="xxd" style-id="73epo34iv3u859p8ppsl86nhe9" timestamp="1587730092672"><title svg:width="500">缓冲内存</title><children><topics type="attached"><topic id="6puq59n39e8i7bld4ringvjppd" modified-by="xxd" style-id="2pauskl0dupc8b6rbm17t5cvvp" timestamp="1587730075121"><title>客户端缓冲</title><children><topics type="attached"><topic id="564naao4mi5n194b1v0qsn6thu" modified-by="xxd" style-id="272ad0jfau2f2oe7u933ol5khk" timestamp="1587730075120"><title>通过参数client-output-buffer-limit控制</title></topic></topics></children></topic><topic id="7ctmvvu1mltc197oougaddr4t4" modified-by="xxd" style-id="2dcghi7894ql3234m9q8pdftnb" timestamp="1587730086474"><title>复制积压缓冲区</title><children><topics type="attached"><topic id="46e1e43faduhq6o8an1heq54bs" modified-by="xxd" style-id="67ncqg34s8p31rukbat0816lg9" timestamp="1587730086473"><title>根据repl-backlog-size参数控制</title></topic></topics></children></topic><topic id="26q5hoatof5os5fcnqoffokktq" modified-by="xxd" style-id="2l208dljo2m3p9nb4ja82nnp7i" timestamp="1587730092650"><title>AOF缓冲区</title><children><topics type="attached"><topic id="25vfpn2gu89nrjhoe96u64c7a5" modified-by="xxd" style-id="5sup0rqmtd6l1e9aaermd8u13v" timestamp="1587730092649"><title>用于在Redis重写AOF文件期间保存最近的写入命令</title></topic></topics></children></topic></topics></children></topic><topic id="5av6nd0qi41mneddirlvn7oulu" modified-by="xxd" style-id="28087vdvb0il37207q0ktnbndn" timestamp="1587730109003"><title>内存碎片</title><children><topics type="attached"><topic id="7sni3n05irflpk4d9gms81mo5j" modified-by="xxd" style-id="06dhvifp99tvqm6q5d9l3j3ck3" timestamp="1587730145083"><title svg:width="500">可采用数据对齐和安全重启等方式规避内存碎片问题</title></topic></topics></children></topic></topics></children></topic><topic id="16tv7s0bovqsh2j2rc70458vb5" modified-by="xxd" style-id="5r0mjcg29ia0dlu9uvvjdr2eft" timestamp="1587730191637"><title>内存回收策略</title><children><topics type="attached"><topic id="62lih572th6pap7809hj84jlou" modified-by="xxd" style-id="7pagh06jmsq2npr1p1jiimfh8a" timestamp="1587730199892"><title>惰性删除</title></topic><topic id="1qa7iedbrotkf58jqrg2ltlceu" modified-by="xxd" style-id="7tu6lujqqe684eu52fqqobbbqh" timestamp="1587730206416"><title>定时任务删除</title></topic></topics></children></topic><topic id="21bio93o463l8g56t0uvh9902m" modified-by="xxd" style-id="5dmnts7uua5dfvuqo6cu692abt" timestamp="1587730308301"><title>内存优化</title><children><topics type="attached"><topic id="3vh4ue6537ljhojsm227rpu7jc" modified-by="xxd" style-id="2mhhuvruthu4ud3m67u2gghkps" timestamp="1587730239751"><title>缩减键值对象的长度</title></topic><topic id="1k037h1km77rdrdpabltoi8i1n" modified-by="xxd" style-id="2mhhuvruthu4ud3m67u2gghkps" timestamp="1587730247128"><title>共享对象池</title></topic><topic id="6tj7o1bjt6iuo36l7fngdt2239" modified-by="xxd" style-id="34sshjgfuktvihhbk9ub44efbp" timestamp="1587730253250"><title>字符串优化</title></topic><topic id="021ij0njed5tlvo7fe5bqjjkpq" modified-by="xxd" style-id="19snk2o0ub96g72r2eoid5g41n" timestamp="1587730305276"><title>编码优化（使用ziplist编码能节约内存但会提高耗时-空间换时间）</title></topic><topic id="04nm9tnjac8kbg0empu2prqvci" modified-by="xxd" style-id="6s8uchaliont0f29tf2rg8dndo" timestamp="1587730341936"><title>控制键的数量（如使用hash结构重构字符串结构）</title></topic></topics></children></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions></topic><topic id="5afelb6usfk1tjum12c7gj22j7" modified-by="xxd" timestamp="1587730373423"><title>9.客户端</title><children><topics type="attached"><topic id="2jluq3u1080kueeftvff5m616q" modified-by="xxd" style-id="1t55qkb3v70v0dhv8vqiv0c6n4" timestamp="1587730393589"><title>Jedis（java）</title></topic><topic id="4skjdebnamikhd5p9eno4suu37" modified-by="xxd" style-id="0odd188p74hjgoe91n587lod0g" timestamp="1587730406972"><title>Redis-py（Python）</title></topic><topic id="4p89qd96pv490ot4o3f0javgv7" modified-by="xxd" style-id="34sg7b4t74eub9qm42or1ap90q" timestamp="1587730422507"><title>Redigo（GO）</title></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions></topic><topic id="5jbuahbm3ojv3aot14splm9dp5" modified-by="xxd" timestamp="1587730449931"><title>10.辅助功能</title><children><topics type="attached"><topic id="75ia3qdqdp74jgg1egmbsq9mt7" modified-by="xxd" style-id="3jotsqg5k8i0p5meg4bvavrjbo" timestamp="1587730463314"><title>慢查询（slowquery）</title></topic><topic id="17710afjg9grekp56er7sv8p1p" modified-by="xxd" style-id="0c2rc7s6uq01nbkus7asrc9d72" timestamp="1587730473368"><title>管道（pipeline）</title></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions></topic><topic id="395t0na3tufva2a7t5s2k3thjg" modified-by="xxd" timestamp="1587734925185"><title>11.缓存问题隐患</title><children><topics type="attached"><topic id="7s0h5t9i1hgtksk98fik6ag9j8" modified-by="xxd" style-id="6i57fdngbgcvpl1h4uf7tgg1bc" timestamp="1587730548377"><title>缓存无底洞</title></topic><topic id="50k1frpnje14fp9c8smt8skva2" modified-by="xxd" style-id="17g59c2sj42bbbp8fi4ptcjacc" timestamp="1587730574093"><title>缓存穿透</title></topic><topic id="4c74v9jod3t4tv5ebd8jopi6p6" modified-by="xxd" style-id="7d7501j7t1qb2rn2pinqcq8iio" timestamp="1587730587361"><title>缓存雪崩</title></topic><topic id="4kbcgks6sje0m6psvq32b4pddv" modified-by="xxd" style-id="5s1q4ra94hmcno2d2snkgngtcb" timestamp="1587730599676"><title>热点key倾斜</title></topic><topic id="2ep7th971t71p3m254pqrva8p5" modified-by="xxd" style-id="5915i45e6ooj0f712rlqglnsgt" timestamp="1587730610477"><title>热点key重建</title></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions><position svg:x="-230" svg:y="-589"/></topic><topic id="7p29prndpp12midckb1ikf2jih" modified-by="xxd" timestamp="1587734946959"><title>12.性能调优</title><children><topics type="attached"><topic id="5adsb8qafv1trel7q9e772l24o" modified-by="xxd" style-id="6icu7j2pscithiksb7kl4mfqo5" timestamp="1587730996096"><title>vm.overcommit_memory=1</title></topic><topic id="1jo989ael34337le2b2scnkn05" modified-by="xxd" style-id="6frs0ifciiq2lb3mbechgrnlka" timestamp="1587731013731"><title>vm.swapiness=1</title></topic><topic id="5tiruherkrfjeto4jfs55h1s6r" modified-by="xxd" style-id="20cphu06sk77pnb85710kgran8" timestamp="1587731025294"><title>关闭THP特性</title></topic><topic id="0lb3vqaeeiuk0das4p9ne9ac37" modified-by="xxd" style-id="0b4eve898rdriec6j7olsq0drm" timestamp="1587731396580"><title>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</title></topic><topic id="6pcak78kt1nj9ho34dd8kvt7v0" modified-by="xxd" style-id="1bv6s4rmih90oqa88q8t84s9a5" timestamp="1587731433088"><title>调大ulimit</title></topic><topic id="6q3kpo458lenkcp8i4i7jrtnus" modified-by="xxd" style-id="7f0vi034j7hb7q1ugh1a3ig1n8" timestamp="1587731455291"><title>调大TCP Backlog</title></topic><topic id="6ocbii00k17o017i5i6289vhm8" modified-by="xxd" style-id="2gmqcdhfrisj06u5ecavvj51gd" timestamp="1587734999192"><title>Redis参数调优</title><children><topics type="attached"><topic id="1bjqp7ulbeblhfdtik1tcpsm9c" modified-by="xxd" style-id="6qlfnciag945nfo140cueelveu" timestamp="1587731622976"><title>appendfsync </title></topic><topic id="0qot64qtggt2n52hrc2mlfib4t" modified-by="xxd" style-id="6a5uphj29on6oq25pgrhtm10v2" timestamp="1587731641742"><title>no-appendfsync-on-rewrite</title></topic><topic id="4bpk08aceshgmfmkr4gdvtfkph" modified-by="xxd" style-id="6prq01eec099cgptnd1r157hbf" timestamp="1587731665034"><title>auto-aof-rewrite-percentage</title></topic><topic id="2v0k192csb3g5ouqbddd50tlt0" modified-by="xxd" style-id="468dgvetpls7dg8ll8vb1hr4u7" timestamp="1587731679362"><title>auto-aof-rewrite-min-size</title></topic><topic id="2ent786qvldcr9vjqpftf8c7gh" modified-by="xxd" style-id="31bodmc0vcna1o68p0rrqu7nvn" timestamp="1587731705157"><title>hash-max-ziplist-entries</title></topic><topic id="35hutlh2olf00ivcvue1p15p33" modified-by="xxd" style-id="4hqgecl922apnjh4qtctongekp" timestamp="1587734763875"><title>hash-max-ziplist-value</title></topic><topic id="42seo4t2otaqtjhoenugidhu2r" modified-by="xxd" style-id="2fdrlar8dvvu90c1e561rskc52" timestamp="1587734785603"><title>list-max-ziplist-size</title></topic><topic id="6qt6af29src5qiekbo7pq4g7r4" modified-by="xxd" style-id="39smohui5tdn3o7dnl2njud01c" timestamp="1587734806739"><title>set-max-intset-entries</title></topic><topic id="5hsmirjpjt496dorr805o91o93" modified-by="xxd" style-id="0gikatduejrkh084rabem04kot" timestamp="1587734833412"><title>zset-max-ziplist-entries</title></topic><topic id="2nn4jlnq1bsqsmi4po6dsjkoe5" modified-by="xxd" style-id="2s1bdpjv856qj5phk7shvv49ia" timestamp="1587734852843"><title>zset-max-ziplist-value</title></topic><topic id="37bppplstat4pan7ipk7d4u0sl" modified-by="xxd" style-id="53e8eofvok10alfm5d281sre86" timestamp="1587734886750"><title>hll-sparse-max-bytes</title></topic><topic id="2g51gmnep4j0ivjct4r4dac75c" modified-by="xxd" style-id="0l3huod7bmgc2qnm3tm6qfe3ut" timestamp="1587734909083"><title>client-output-buffer-limit</title></topic></topics></children><notes><html><xhtml:p>Redis3.2.8配置参数及说明</xhtml:p><xhtml:p/><xhtml:p>bind 127.0.0.1</xhtml:p><xhtml:p># 绑定的主机地址，不设置默认将处理所有请求</xhtml:p><xhtml:p>protected-mode yes</xhtml:p><xhtml:p># 是否开启保护模式，默认开启，要是配置里面没有指定bind和密码，开启该参数后，redis只会本地进行访问，</xhtml:p><xhtml:p>拒绝外部访问，要是开启了密码和bind，可以开启，否则最好关闭，设置为no</xhtml:p><xhtml:p>port 6379</xhtml:p><xhtml:p># 监听的端口号</xhtml:p><xhtml:p>tcp-backlog 511</xhtml:p><xhtml:p># 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度，此值必须不大于linux系统定义的</xhtml:p><xhtml:p>/proc/sys/net/core/somaxconn值，默认是511，而linux的默认参数值是128，当系统并发量并且客户端</xhtml:p><xhtml:p>速度缓慢的时候，可以将这两个参数一起参考设定，该内核参数默认值一般是128，对于负载很大的程序来说</xhtml:p><xhtml:p>不能满足，一般会将它修改为2048或者更大，在/etc/sysctl.conf中添加：net.core.somaxconn=2048,然后</xhtml:p><xhtml:p>使用：sysctl -p使该设定生效</xhtml:p><xhtml:p>timeout 0</xhtml:p><xhtml:p># 当客户端闲置多长时间后关闭连接，0,表示不限制</xhtml:p><xhtml:p>tcp-keepalive 300</xhtml:p><xhtml:p># 如果设置不为0，就使用配置tcp的SO_KEEPALIVE值，使用keepalive有两个好处:检测挂掉的对端。</xhtml:p><xhtml:p>降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在Linux内核中，</xhtml:p><xhtml:p>设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值。</xhtml:p><xhtml:p>daemonize yes</xhtml:p><xhtml:p># 是否以守护进程的模式运行，当使用启动脚本运行时，与此设置关系不大</xhtml:p><xhtml:p>supervised no</xhtml:p><xhtml:p># 可以通过upstart和systemd管理Redis守护进程，这个参数是和具体的操作系统相关的</xhtml:p><xhtml:p>pidfile /var/run/redis_6379.pid</xhtml:p><xhtml:p># 当redis以守护进程方式运行时，默认写入pid的文件及路径</xhtml:p><xhtml:p>loglevel notice</xhtml:p><xhtml:p># 日志级别，最好是warning</xhtml:p><xhtml:p>logfile /var/log/redis_6379.log</xhtml:p><xhtml:p># 指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null</xhtml:p><xhtml:p>databases 16</xhtml:p><xhtml:p># 数据库的数量，默认使用的数据库是DB 0。可以通过”SELECT “命令选择一个db</xhtml:p><xhtml:p>save 900 1</xhtml:p><xhtml:p># 900秒有一个key变化，就做一次保存</xhtml:p><xhtml:p>save 300 10</xhtml:p><xhtml:p># 300秒有十个key变化，就做一次保存</xhtml:p><xhtml:p>save 60 10000</xhtml:p><xhtml:p># 60秒有10000个key变化，就做一次保存</xhtml:p><xhtml:p>stop-writes-on-bgsave-error yes</xhtml:p><xhtml:p># 在出现错误的时候，是否要停止保存</xhtml:p><xhtml:p>rdbcompression yes</xhtml:p><xhtml:p># 使用压缩rdb文件，rdb文件压缩使用LZF算法，yes表示压缩，但需要消耗CPU资源，no表示不压缩，需要跟多磁盘空间</xhtml:p><xhtml:p>rdbchecksum yes</xhtml:p><xhtml:p># 是否校验rdb文件的名称，从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64校验和，这更有利于文件的容错，</xhtml:p><xhtml:p>但是在保存rdb文件的时候，会有大概10%的性能损耗，如果追求高性能，可关闭该配置</xhtml:p><xhtml:p>dbfilename dump.rdb</xhtml:p><xhtml:p># rdb文件的名称</xhtml:p><xhtml:p>dir /var/lib/redis/6379</xhtml:p><xhtml:p># 数据库目录，数据库的写入会在这个目录，rdb、aof文件也会写在这个目录</xhtml:p><xhtml:p>slave-serve-stale-data yes</xhtml:p><xhtml:p># 当从库同主机失去连接或者复制正在进行，从库有两种运行方式</xhtml:p><xhtml:p>(1)、默认yes，从库会继续相应客户端的请求</xhtml:p><xhtml:p>(2)、no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误"SYNC with master in progress"</xhtml:p><xhtml:p>slave-read-only yes</xhtml:p><xhtml:p># yes开启从库只读</xhtml:p><xhtml:p>repl-diskless-sync no</xhtml:p><xhtml:p># 是否使用socket方式复制数据，目前redis复制提供两种凡是，disk和socket，如果新的slave连上来或者重连的slave</xhtml:p><xhtml:p>无法部分同步，就会执行全量同步，master会生成rdb文件，有两种方式：</xhtml:p><xhtml:p>(1)、disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传送给slave</xhtml:p><xhtml:p>(2)、socket是master创建一个新的进程，直接把rdb文件以socket的方式给slave</xhtml:p><xhtml:p>disk方式的时候当一个rdb保存的过程中，多个slave都能共享这个rdb文件，socket的方式就是一个个slave顺序复制</xhtml:p><xhtml:p>在磁盘速度缓慢，网速快的情况下建议使用socket方式</xhtml:p><xhtml:p>repl-diskless-sync-delay 5</xhtml:p><xhtml:p># diskless复制的延迟时间，防止设置为0，一旦开始复制，节点不会再接受新的slave的复制请求，直到下一个rdb传输，</xhtml:p><xhtml:p>所以最好等待一段时间，等更多的slave连上来</xhtml:p><xhtml:p>repl-disable-tcp-nodelay no</xhtml:p><xhtml:p># 是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes</xhtml:p><xhtml:p>来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。</xhtml:p><xhtml:p>默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。</xhtml:p><xhtml:p>slave-priority 100</xhtml:p><xhtml:p># 当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。</xhtml:p><xhtml:p>appendonly no</xhtml:p><xhtml:p># 默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，</xhtml:p><xhtml:p>根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后</xhtml:p><xhtml:p>都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件</xhtml:p><xhtml:p>appendfilename "appendonly.aof"</xhtml:p><xhtml:p># aof文件名</xhtml:p><xhtml:p>appendfsync everysec</xhtml:p><xhtml:p># aof持久化策略的配置</xhtml:p><xhtml:p>(1)、no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</xhtml:p><xhtml:p>(2)、always表示每次写入都执行fsync，以保证数据同步到磁盘。</xhtml:p><xhtml:p>(3)、everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</xhtml:p><xhtml:p>no-appendfsync-on-rewrite no</xhtml:p><xhtml:p># 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，</xhtml:p><xhtml:p>no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，</xhtml:p><xhtml:p>这样对持久化特性来说这是更安全的选择。设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，</xhtml:p><xhtml:p>默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。</xhtml:p><xhtml:p>auto-aof-rewrite-percentage 100</xhtml:p><xhtml:p># aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候</xhtml:p><xhtml:p>Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，</xhtml:p><xhtml:p>自动启动新的日志重写过程。</xhtml:p><xhtml:p>auto-aof-rewrite-min-size 64mb</xhtml:p><xhtml:p># 设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</xhtml:p><xhtml:p>aof-load-truncated yes</xhtml:p><xhtml:p># aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，</xhtml:p><xhtml:p>尤其在ext4文件系统没有加上data=ordered选项(redis宕机或者异常终止不会造成尾部不完整现象)出现这种现象，可以选择让redis退出，</xhtml:p><xhtml:p>或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。</xhtml:p><xhtml:p>如果是no，用户必须手动redis-check-aof修复AOF文件才可以</xhtml:p><xhtml:p>lua-time-limit 5000</xhtml:p><xhtml:p># 如果达到最大时间限制(毫秒)，redis会记个log，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。</xhtml:p><xhtml:p>第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。</xhtml:p><xhtml:p>slowlog-log-slower-than 10000</xhtml:p><xhtml:p># slowlog是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slowlog中，slowlog保存在内存中，所以没有IO操作。</xhtml:p><xhtml:p>执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。</xhtml:p><xhtml:p>slowlog-max-len 128</xhtml:p><xhtml:p># 慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。</xhtml:p><xhtml:p>latency-monitor-threshold 0</xhtml:p><xhtml:p># 延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。</xhtml:p><xhtml:p>0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIGSET命令动态设置。</xhtml:p><xhtml:p>notify-keyspace-events ""</xhtml:p><xhtml:p># 键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。</xhtml:p><xhtml:p># notify-keyspace-events的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：</xhtml:p><xhtml:p># K 键空间通知，所有通知以 __keyspace@__ 为前缀</xhtml:p><xhtml:p># E 键事件通知，所有通知以 __keyevent@__ 为前缀</xhtml:p><xhtml:p># g DEL 、 EXPIRE 、RENAME 等类型无关的通用命令的通知</xhtml:p><xhtml:p># $ 字符串命令的通知</xhtml:p><xhtml:p># l 列表命令的通知</xhtml:p><xhtml:p># s 集合命令的通知</xhtml:p><xhtml:p># h 哈希命令的通知</xhtml:p><xhtml:p># z 有序集合命令的通知</xhtml:p><xhtml:p># x 过期事件：每当有过期键被删除时发送</xhtml:p><xhtml:p># e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</xhtml:p><xhtml:p># A 参数 g$lshzxe 的别名</xhtml:p><xhtml:p># 输入的参数中至少要有一个K或者E,否则的话,不管其余的参数是什么，都不会有任何 通知被分发。详细使用可以参考http://redis.io/topics/notifications</xhtml:p><xhtml:p>hash-max-ziplist-entries 512</xhtml:p><xhtml:p># 数据量小于等于hash-max-ziplist-entries的用ziplist，大于hash-max-ziplist-entries用hash</xhtml:p><xhtml:p>hash-max-ziplist-value 64</xhtml:p><xhtml:p># value大小小于等于hash-max-ziplist-value的用ziplist，大于hash-max-ziplist-value用hash。</xhtml:p><xhtml:p>list-max-ziplist-size -2</xhtml:p><xhtml:p># The highestperforming option is usually -2 (8 Kb size) or -1 (4 Kb size),</xhtml:p><xhtml:p># but if your use caseis unique, adjust the settings as necessary.</xhtml:p><xhtml:p>list-compress-depth 0</xhtml:p><xhtml:p>set-max-intset-entries 512</xhtml:p><xhtml:p># 数据量小于等于set-max-intset-entries用iniset，大于set-max-intset-entries用set。</xhtml:p><xhtml:p>zset-max-ziplist-entries 128</xhtml:p><xhtml:p># 数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset。</xhtml:p><xhtml:p>zset-max-ziplist-value 64</xhtml:p><xhtml:p># value大小小于等于zset-max-ziplist-value用ziplist，大于zset-max-ziplist-value用zset。</xhtml:p><xhtml:p>hll-sparse-max-bytes 3000</xhtml:p><xhtml:p># value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。</xhtml:p><xhtml:p>一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。</xhtml:p><xhtml:p>activerehashing yes</xhtml:p><xhtml:p># Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，</xhtml:p><xhtml:p>不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。</xhtml:p><xhtml:p>client-output-buffer-limit normal 0 0 0</xhtml:p><xhtml:p># 对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。</xhtml:p><xhtml:p># 对于normalclient，第一个0表示取消hard limit，第二个0和第三个0表示取消soft limit，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。</xhtml:p><xhtml:p>client-output-buffer-limit slave 256mb 64mb 60</xhtml:p><xhtml:p># 对于slaveclient和MONITER client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。</xhtml:p><xhtml:p>client-output-buffer-limit pubsub 32mb 8mb 60</xhtml:p><xhtml:p># 对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。</xhtml:p><xhtml:p>hz 10</xhtml:p><xhtml:p>#redis执行任务的频率为1s除以hz。</xhtml:p><xhtml:p>aof-rewrite-incremental-fsync yes</xhtml:p><xhtml:p># 在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。</xhtml:p></html><plain>Redis3.2.8配置参数及说明&#13;
&#13;
bind 127.0.0.1&#13;
# 绑定的主机地址，不设置默认将处理所有请求&#13;
protected-mode yes&#13;
# 是否开启保护模式，默认开启，要是配置里面没有指定bind和密码，开启该参数后，redis只会本地进行访问，&#13;
拒绝外部访问，要是开启了密码和bind，可以开启，否则最好关闭，设置为no&#13;
port 6379&#13;
# 监听的端口号&#13;
tcp-backlog 511&#13;
# 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度，此值必须不大于linux系统定义的&#13;
/proc/sys/net/core/somaxconn值，默认是511，而linux的默认参数值是128，当系统并发量并且客户端&#13;
速度缓慢的时候，可以将这两个参数一起参考设定，该内核参数默认值一般是128，对于负载很大的程序来说&#13;
不能满足，一般会将它修改为2048或者更大，在/etc/sysctl.conf中添加：net.core.somaxconn=2048,然后&#13;
使用：sysctl -p使该设定生效&#13;
timeout 0&#13;
# 当客户端闲置多长时间后关闭连接，0,表示不限制&#13;
tcp-keepalive 300&#13;
# 如果设置不为0，就使用配置tcp的SO_KEEPALIVE值，使用keepalive有两个好处:检测挂掉的对端。&#13;
降低中间设备出问题而导致网络看似连接却已经与对端端口的问题。在Linux内核中，&#13;
设置了keepalive，redis会定时给对端发送ack。检测到对端关闭需要两倍的设置值。&#13;
daemonize yes&#13;
# 是否以守护进程的模式运行，当使用启动脚本运行时，与此设置关系不大&#13;
supervised no&#13;
# 可以通过upstart和systemd管理Redis守护进程，这个参数是和具体的操作系统相关的&#13;
pidfile /var/run/redis_6379.pid&#13;
# 当redis以守护进程方式运行时，默认写入pid的文件及路径&#13;
loglevel notice&#13;
# 日志级别，最好是warning&#13;
logfile /var/log/redis_6379.log&#13;
# 指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null&#13;
databases 16&#13;
# 数据库的数量，默认使用的数据库是DB 0。可以通过”SELECT “命令选择一个db&#13;
save 900 1&#13;
# 900秒有一个key变化，就做一次保存&#13;
save 300 10&#13;
# 300秒有十个key变化，就做一次保存&#13;
save 60 10000&#13;
# 60秒有10000个key变化，就做一次保存&#13;
stop-writes-on-bgsave-error yes&#13;
# 在出现错误的时候，是否要停止保存&#13;
rdbcompression yes&#13;
# 使用压缩rdb文件，rdb文件压缩使用LZF算法，yes表示压缩，但需要消耗CPU资源，no表示不压缩，需要跟多磁盘空间&#13;
rdbchecksum yes&#13;
# 是否校验rdb文件的名称，从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64校验和，这更有利于文件的容错，&#13;
但是在保存rdb文件的时候，会有大概10%的性能损耗，如果追求高性能，可关闭该配置&#13;
dbfilename dump.rdb&#13;
# rdb文件的名称&#13;
dir /var/lib/redis/6379&#13;
# 数据库目录，数据库的写入会在这个目录，rdb、aof文件也会写在这个目录&#13;
slave-serve-stale-data yes&#13;
# 当从库同主机失去连接或者复制正在进行，从库有两种运行方式&#13;
(1)、默认yes，从库会继续相应客户端的请求&#13;
(2)、no，除去INFO和SLAVOF命令之外的任何请求都会返回一个错误"SYNC with master in progress"&#13;
slave-read-only yes&#13;
# yes开启从库只读&#13;
repl-diskless-sync no&#13;
# 是否使用socket方式复制数据，目前redis复制提供两种凡是，disk和socket，如果新的slave连上来或者重连的slave&#13;
无法部分同步，就会执行全量同步，master会生成rdb文件，有两种方式：&#13;
(1)、disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传送给slave&#13;
(2)、socket是master创建一个新的进程，直接把rdb文件以socket的方式给slave&#13;
disk方式的时候当一个rdb保存的过程中，多个slave都能共享这个rdb文件，socket的方式就是一个个slave顺序复制&#13;
在磁盘速度缓慢，网速快的情况下建议使用socket方式&#13;
repl-diskless-sync-delay 5&#13;
# diskless复制的延迟时间，防止设置为0，一旦开始复制，节点不会再接受新的slave的复制请求，直到下一个rdb传输，&#13;
所以最好等待一段时间，等更多的slave连上来&#13;
repl-disable-tcp-nodelay no&#13;
# 是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes&#13;
来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。&#13;
默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。&#13;
slave-priority 100&#13;
# 当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。&#13;
appendonly no&#13;
# 默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，&#13;
根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后&#13;
都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件&#13;
appendfilename "appendonly.aof"&#13;
# aof文件名&#13;
appendfsync everysec&#13;
# aof持久化策略的配置&#13;
(1)、no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。&#13;
(2)、always表示每次写入都执行fsync，以保证数据同步到磁盘。&#13;
(3)、everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。&#13;
no-appendfsync-on-rewrite no&#13;
# 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，&#13;
no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，&#13;
这样对持久化特性来说这是更安全的选择。设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，&#13;
默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。&#13;
auto-aof-rewrite-percentage 100&#13;
# aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候&#13;
Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，&#13;
自动启动新的日志重写过程。&#13;
auto-aof-rewrite-min-size 64mb&#13;
# 设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写&#13;
aof-load-truncated yes&#13;
# aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，&#13;
尤其在ext4文件系统没有加上data=ordered选项(redis宕机或者异常终止不会造成尾部不完整现象)出现这种现象，可以选择让redis退出，&#13;
或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。&#13;
如果是no，用户必须手动redis-check-aof修复AOF文件才可以&#13;
lua-time-limit 5000&#13;
# 如果达到最大时间限制(毫秒)，redis会记个log，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。&#13;
第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。&#13;
slowlog-log-slower-than 10000&#13;
# slowlog是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slowlog中，slowlog保存在内存中，所以没有IO操作。&#13;
执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。&#13;
slowlog-max-len 128&#13;
# 慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。&#13;
latency-monitor-threshold 0&#13;
# 延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。&#13;
0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIGSET命令动态设置。&#13;
notify-keyspace-events ""&#13;
# 键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。&#13;
# notify-keyspace-events的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：&#13;
# K 键空间通知，所有通知以 __keyspace@__ 为前缀&#13;
# E 键事件通知，所有通知以 __keyevent@__ 为前缀&#13;
# g DEL 、 EXPIRE 、RENAME 等类型无关的通用命令的通知&#13;
# $ 字符串命令的通知&#13;
# l 列表命令的通知&#13;
# s 集合命令的通知&#13;
# h 哈希命令的通知&#13;
# z 有序集合命令的通知&#13;
# x 过期事件：每当有过期键被删除时发送&#13;
# e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送&#13;
# A 参数 g$lshzxe 的别名&#13;
# 输入的参数中至少要有一个K或者E,否则的话,不管其余的参数是什么，都不会有任何 通知被分发。详细使用可以参考http://redis.io/topics/notifications&#13;
hash-max-ziplist-entries 512&#13;
# 数据量小于等于hash-max-ziplist-entries的用ziplist，大于hash-max-ziplist-entries用hash&#13;
hash-max-ziplist-value 64&#13;
# value大小小于等于hash-max-ziplist-value的用ziplist，大于hash-max-ziplist-value用hash。&#13;
list-max-ziplist-size -2&#13;
# The highestperforming option is usually -2 (8 Kb size) or -1 (4 Kb size),&#13;
# but if your use caseis unique, adjust the settings as necessary.&#13;
list-compress-depth 0&#13;
set-max-intset-entries 512&#13;
# 数据量小于等于set-max-intset-entries用iniset，大于set-max-intset-entries用set。&#13;
zset-max-ziplist-entries 128&#13;
# 数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset。&#13;
zset-max-ziplist-value 64&#13;
# value大小小于等于zset-max-ziplist-value用ziplist，大于zset-max-ziplist-value用zset。&#13;
hll-sparse-max-bytes 3000&#13;
# value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。&#13;
一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。&#13;
activerehashing yes&#13;
# Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，&#13;
不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。&#13;
client-output-buffer-limit normal 0 0 0&#13;
# 对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。&#13;
# 对于normalclient，第一个0表示取消hard limit，第二个0和第三个0表示取消soft limit，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。&#13;
client-output-buffer-limit slave 256mb 64mb 60&#13;
# 对于slaveclient和MONITER client，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。&#13;
client-output-buffer-limit pubsub 32mb 8mb 60&#13;
# 对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。&#13;
hz 10&#13;
#redis执行任务的频率为1s除以hz。&#13;
aof-rewrite-incremental-fsync yes&#13;
# 在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。</plain></notes></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions></topic><topic id="0fdaghgiotiaq3gb72e4ucn2ci" modified-by="xxd" timestamp="1587735139464"><title>13.监控</title><children><topics type="attached"><topic id="216gj009hrvn9dkm7vtnug7ful" modified-by="xxd" style-id="7u5i2f70kpn57gu0kfa91lr8m7" timestamp="1587735047414"><title>info</title></topic><topic id="7omgr84auim48akhea8d2l8c3g" modified-by="xxd" style-id="3fnksbt3vimojum3uqdkd3u1tk" timestamp="1587735055225"><title>redis-stat</title></topic><topic id="637ekvnhd9pg7jgiqeudd59sk3" modified-by="xxd" style-id="29o853nkeivf40pltbrg2giap9" timestamp="1587735057750"><title>redislive</title></topic><topic id="46j768b4j1n8bge8sl3ofpasdl" modified-by="xxd" style-id="254eeki2at5dm612ritf3tkri7" timestamp="1587735085463"><title>redis-cli monitor</title></topic><topic id="3j5iqf452o87kc00ecu98sqom7" modified-by="xxd" style-id="6vd84i39v47gnqpdik9nv5shj0" timestamp="1587735109686"><title>redis-cli --latency</title></topic><topic id="03g76dei38am9pb236mmselaj7" modified-by="xxd" style-id="2kiu6onkes6f44obp6fdteo6jn" timestamp="1587735127918"><title>Codis Dashboard</title></topic><topic id="6rmp2okt2paa4b8anqhbn5m8pd" modified-by="xxd" style-id="05n7olk058rhmbgq7lm1borha7" timestamp="1587735133867"><title>Zabbix</title></topic><topic id="5s87unmdunmk7qkqpcuu4j1ioq" modified-by="xxd" style-id="0uhn2ihhffifikqe6hmslmeq1u" timestamp="1587735142998"><title>Grafana</title></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>3</right-number></content></extension></extensions></topic><title>画布 1</title></sheet></xmap-revision-content>